Atajo;Comando;Descripcion;
h;h(elp) [command];Sin argumento, imprime la lista de comandos disponibles. Con un command como argumento, imprime la ayuda sobre ese comando. help pdb muestra la documentación completa (el docstring del módulo pdb). Como el argumento command debe ser un identificador, hay que introducir help exec para obtener ayuda sobre el comando !.;
w;w(here);Imprime un rastro de la pila (stack trace), con el marco más reciente en la parte inferior. Una flecha indica el marco actual, que determina el contexto de la mayoría de los comandos.;
d;d(own) [count];Mueve los niveles del marco actual count (por defecto uno) hacia abajo en el trazado de la pila (stack trace) (a un marco más nuevo).;
u;u(p) [count];Mueve el marco actual count (por defecto uno) niveles hacia arriba en el trazado de la pila (stack trace) (a un marco más antiguo).;
b;b(reak) [([filename:]lineno | function) [, condition]];Con un argumento lineno, establece una ruptura allí en el archivo actual. Con un argumento function, establece una ruptura en la primera declaración ejecutable dentro de esa función. El número de línea puede ir precedido de un nombre de archivo y dos puntos, para especificar un punto de interrupción en otro archivo (probablemente uno que aún no se haya cargado). El archivo se busca en sys.path. Observe que a cada punto de interrupción se le asigna un número al que se refieren todos los demás comandos de puntos de interrupción. Si un segundo argumento está presente, es una expresión que debe ser evaluada como verdadera antes de que el punto de ruptura sea honrado. Sin argumento, enumere todas las interrupciones, incluyendo para cada punto de interrupción, el número de veces que se ha alcanzado ese punto de interrupción, el conteo de ignorancia actual y la condición asociada, si la hay.;
tbreak;tbreak [([filename:]lineno | function) [, condition]];Punto de interrupción temporal, que se elimina automáticamente cuando se ejecuta por primera vez. Los argumentos son los mismos que para break.;
cl;cl(ear) [filename:lineno | bpnumber ...];Con el argumento filename:lineno, despeja todos los puntos de interrupción en esta línea. Con una lista de números de puntos de interrupción separados por espacios, despeja esos puntos de interrupción. Sin el argumento, despeja todos los puntos de interrupción (pero primero pide confirmación).;
disable;disable [bpnumber ...];Deshabilitar los puntos de ruptura interrupción como una lista de números de puntos de ruptura separados por espacios. Desactivar un punto de interrupción significa que no puede hacer que el programa detenga la ejecución, pero a diferencia de borrar un punto de interrupción, permanece en la lista de puntos de interrupción y puede ser (re)activado.
enable;enable [bpnumber ...];Habilitar los puntos de interrupción especificados.;
ignore;ignore bpnumber [count];Establece el conteo de ignorar el número de punto de interrupción dado. Si se omite el recuento, el recuento de ignorar se establece en 0. Un punto de interrupción se activa cuando el recuento de ignorar es cero. Cuando no es cero, el conteo se decrementa cada vez que se alcanza el punto de ruptura y el punto de ruptura no se desactiva y cualquier condición asociada se evalúa como verdadera.;
condition;condition bpnumber [condition];Establece una nueva condition para el punto de interrupción, una expresión que debe evaluarse como verdadera antes de que el punto de ruptura sea honrado. Si la condición está ausente, se elimina cualquier condición existente, es decir, el punto de ruptura se hace incondicional.;
commands;commands [bpnumber];Especifique una lista de comandos para el número del punto de interrupción bpnumber. Los comandos mismos aparecen en las siguientes líneas. Escriba una línea que contenga sólo end para terminar los comandos.;
s;s(tep);Ejecutar la línea actual, detenerse en la primera ocasión posible (ya sea en una función que se llame o en la siguiente línea de la función actual).;
n;n(ext);Continúe la ejecución hasta que se alcance la siguiente línea de la función actual o vuelva. (La diferencia entre next y step es que step se detiene dentro de una función llamada, mientras que next ejecuta las funciones llamadas a (casi) toda velocidad, deteniéndose sólo en la siguiente línea de la función actual).;
unt;unt(il) [lineno];Sin argumento, continúe la ejecución hasta que se alcance la línea con un número mayor que el actual. Con un número de línea, continúe la ejecución hasta que se alcance una línea con un número mayor o igual a ese. En ambos casos, también se detiene cuando vuelve la trama actual. Distinto en la versión 3.2: Permita dar un número de línea explícito.;
r;r(eturn);Continúe la ejecución hasta que vuelva la función actual.;
c;c(ont(inue))Continúa la ejecución;sólo se detiene cuando se encuentra un punto de ruptura.;
j;j(ump) lineno;Establezca la siguiente línea que será ejecutada. Sólo disponible en el marco de más bajo. Esto te permite saltar hacia atrás y ejecutar el código de nuevo, o saltar hacia adelante para saltar el código que no quieres ejecutar.Cabe señalar que no todos los saltos están permitidos – por ejemplo, no es posible saltar en medio de un bucle for o fuera de una cláusula finally.;
l;l(ist) [first[, last]];Enumere el código fuente del archivo actual. Sin argumentos, enumere 11 líneas alrededor de la línea actual o continúe la lista anterior. Con . como argumento, enumere 11 líneas alrededor de la línea actual. Con un argumento, enumere 11 líneas alrededor de esa línea. Con dos argumentos, enumere el rango dado, si el segundo argumento es menor que el primero, se interpreta como un conteo. La línea actual en el cuadro actual se indica con ->. Si se está depurando una excepción, la línea donde la excepción fue originalmente planteada o propagada se indica con >>, si difiere de la línea actual.;
ll;ll | longlist;Enumere todos los códigos fuente de la función o marco actual. Las líneas interesantes están marcadas como list.;
a;a(rgs);Imprime la lista de argumentos de la función actual.;
p;p expression;Evalúa la expression en el contexto actual e imprime su valor.;
pp;pp expression;Como el comando p, excepto que el valor de la expresión se imprime bastante usando el módulo pprint.;
whatis;whatis expression;Imprime el tipo de la expression.;
source;source expression;Intenta obtener el código fuente del objeto dado y mostrarlo.;
display;display [expression];Muestra el valor de la expresión si ha cambiado, cada vez que se detenga la ejecución en el marco actual. Sin expresión, enumere todas las expresiones de visualización para el cuadro actual.;
undisplay;undisplay [expression];No muestren más la expresión en el cuadro actual. Sin la expresión, borre todas las expresiones de la pantalla para el marco actual.;
interact;interact;Inicie un intérprete interactivo (usando el módulo code) cuyo espacio de nombres global contiene todos los nombres (globales y locales) que se encuentran en el ámbito actual.;
alias;alias [name [command]];Crear un alias llamado name que ejecute el command. El comando no debe estar entre comillas. Los parámetros reemplazables pueden ser indicados por %1, %2, y así sucesivamente, mientras que %* es reemplazado por todos los parámetros. Si no se da ningún comando, se muestra el alias actual de name. Si no se dan argumentos, se muestran todos los alias. Los alias pueden anidarse y pueden contener cualquier cosa que se pueda teclear legalmente en el prompt de pdb. Tenga en cuenta que los comandos internos de pdb pueden ser anulados por los alias. Dicho comando se oculta hasta que se elimina el alias. El alias se aplica de forma recursiva a la primera palabra de la línea de comandos, todas las demás palabras de la línea se dejan en paz.;
unalias;unalias name;Elimine el alias especificado.! statement Ejecute (una línea) statement en el contexto del marco de la pila actual. El signo de exclamación puede ser omitido a menos que la primera palabra de la declaración se parezca a un comando de depuración. Para establecer una variable global, puede anteponer al comando de asignación una declaración global en la misma línea.;
run;run [args ...];;
restart;restart [args ...];Reinicie el programa Python depurado. Si se suministra un argumento, se divide con shlex y el resultado se utiliza como el nuevo sys.argv. Se conservan el historial, los puntos de interrupción, las acciones y las opciones del depurador. restart es un alias de run.;
q;q(uit);Salga del depurador. El programa que se está ejecutando fue abortado.;
debug;debug code;Introduce un depurador recursivo que pasa por el argumento del código (que es una expresión o declaración arbitraria que debe ejecutarse en el entorno actual).;
retval;retval;Imprime el valor de retorno para el último retorno de una función.;