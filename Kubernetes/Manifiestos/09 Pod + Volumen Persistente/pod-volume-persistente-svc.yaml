#apiVersion: v1
#kind: PersistentVolumeClaim
#metadata:
#  name: persistence-volume
#spec:
#  volumeMode: Filesystem
#  storageClassName: local
#  accessModes:
#    - ReadWriteMany
#  resources:
#    requests:
#      storage: 500Mi
---
apiVersion: v1
kind: Pod
metadata:
  labels:
    run: volume-multicontainer # base del selector
  name: multicontainer-pod-loadbalancer # nombre del HOSTNAME del POD
spec:
  volumes: # directorio del nodo
    - name: almacenamiento-persistido
      persistentVolumeClaim:
        claimName: persistence-volume
    
  dnsPolicy: ClusterFirst
  restartPolicy: Never    
    
  containers:
  - name: python # nombre que va a tener el contenedor dentro del POD
    image: jorgecardona/test-kubernetes-ip-python-3.10.5:v1 # imagen con la que se va a crear el contenedor

    env:
    - name: DIRECTORIO # NOMBRE DE LA VARIABLE DE AMBIENTE
      value: /data/files # valor definido directamente
    - name: ARCHIVO # NOMBRE DE LA VARIABLE DE AMBIENTE
      value: info.txt # valor definido directamente
      
    volumeMounts: # solo crea DIRECTORIOS no ARCHIVOS
    - name: almacenamiento-persistido # el volumen de donde se quiere conectar
      mountPath: /data/files # directorio dentro del POD
      
      
  - name: java # nombre que va a tener el contenedor dentro del POD
    image: jorgecardona/test-kubernetes-ip-java-17:v1 # imagen con la que se va a crear el contenedor

    env:
    - name: DIRECTORIO # NOMBRE DE LA VARIABLE DE AMBIENTE
      value: /data/files # valor definido directamente
    - name: ARCHIVO # NOMBRE DE LA VARIABLE DE AMBIENTE
      value: info.txt # valor definido directamente
      
    volumeMounts: # solo crea DIRECTORIOS no ARCHIVOS
    - name: almacenamiento-persistido # el volumen de donde se quiere conectar
      mountPath: /data/files
      

status: {}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    run: multicontainer-volumen-compartido-testing-loadbalancer-service
  name: multicontainer-volumen-compartido-svc-loadbalancer
  namespace: default
spec:
  sessionAffinity: None
  type: LoadBalancer
  selector:
    run: volume-multicontainer
  ports:

  - name: port-java # se puede poner el nombre que se quiera, lo importante es el puerto que TIENE que ser el del contenedor
    protocol: TCP
    targetPort: 9999 # puerto original donde se expone el contenedor de la imagen 
    port: 3333 # puerto en el que se quiere exponer la aplicacion, solo porque esta declarada la propiedad targetPort
    
  - name: port-python
    protocol: TCP
    targetPort: 5000 # puerto original donde se expone el contenedor de la imagen 
    port: 7777 # puerto en el que se quiere exponer la aplicacion, solo porque esta declarada la propiedad targetPort
---

# http://localhost:3333/java
# http://localhost:7777/python

# kubectl expose pod multicontainer-pod-loadbalancer --name=multicontainer-pod-svc-loadbalancer --type=LoadBalancer
# kubectl get services
# kubectl describe svc multicontainer-pod-svc-loadbalancer
# kubectl describe pod multicontainer-pod-loadbalancer