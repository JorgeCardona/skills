apiVersion: v1
kind: ConfigMap
metadata:
  name: demo-config-map
data:
  ENVIRONMENT: "testing"
  PUERTO: "30000"
  REGION: "SUR_AMERICA"
---
apiVersion: v1
kind: Secret
metadata:
  name: demo-config-secrets-sin-cifrar
stringData:
  PRIMER_SECRETO: "SECRETO_SIN_CIFRAR"
  SEGUNDO_SECRETO: "VALORES_SIN_CIFRAR"
  ULTIMO_SECRETO: "INFORMACION_EXPUESTA"
---
apiVersion: v1
kind: Secret
metadata:
  name: demo-config-secrets
type: Opaque
stringData:
  ENVIRONMENT_SECRETO: "ESPACIAL"
  PUERTO_SECRETO: "195019781925"
  REGION_SECRETA: "XANADU"
---
apiVersion: v1
kind: Secret
metadata:
  name: demo-config-secret-base64
type: Opaque
data:
  username: Sm9yZ2UgQ2FyZG9uYQ==
  password: S3ViZXJuZXRlcyB5IERvY2tlciBlbiBXaW5kb3dzIHkgTGludXg=
---
apiVersion: v1
kind: Pod
metadata:
  labels:
    run: multicontainer-multiservicio # base del selector
  name: multicontainer-pod-loadbalancer # nombre del HOSTNAME del POD
spec:
  containers:
  - name: python # nombre que va a tener el contenedor dentro del POD
    image: jorgecardona/test-kubernetes-ip-python-3.10.5:v1 # imagen con la que se va a crear el contenedor
    env:
    - name: ENVIRONMENT # NOMBRE DE LA VARIABLE DE AMBIENTE
      valueFrom:
        configMapKeyRef:
          name: demo-config-map # Nombre del objeto tipo config map de donde se van a leer las variables
          key: ENVIRONMENT # valor leido y definido desde el ConfigMap llamado demo-config-map
    - name: PORT # NOMBRE DE LA VARIABLE DE AMBIENTE
      valueFrom:
        configMapKeyRef:
          name: demo-config-map # Nombre del objeto tipo config map de donde se van a leer las variables
          key: PUERTO # valor leido y definido desde el ConfigMap llamado demo-config-map
    - name: ZONA # NOMBRE DE LA VARIABLE DE AMBIENTE
      valueFrom:
        configMapKeyRef:
          name: demo-config-map
          key: REGION # valor leido y definido desde el ConfigMap llamado demo-config-map

  
    - name: PRIMERO # NOMBRE DE LA VARIABLE DE AMBIENTE
      valueFrom:
        secretKeyRef:
            name: demo-config-secrets-sin-cifrar # Nombre del objeto tipo Secreto de donde se van a leer las variables
            key: PRIMER_SECRETO # valor leido y definido desde el ConfigMap llamado demo-config-map
    - name: SEGUNDO # NOMBRE DE LA VARIABLE DE AMBIENTE
      valueFrom:
        secretKeyRef:
            name: demo-config-secrets-sin-cifrar # Nombre del objeto tipo Secreto de donde se van a leer las variables
            key: SEGUNDO_SECRETO # valor leido y definido desde el ConfigMap llamado demo-config-map
    - name: ULTIMO # NOMBRE DE LA VARIABLE DE AMBIENTE
      valueFrom:
        secretKeyRef:
            name: demo-config-secrets-sin-cifrar # Nombre del objeto tipo Secreto de donde se van a leer las variables
            key: ULTIMO_SECRETO # valor leido y definido desde el ConfigMap llamado demo-config-map
            
    - name: OTRA_PYTHON # NOMBRE DE LA VARIABLE DE AMBIENTE
      value: "VALORES ADICIONALES EN EL CONTENEDOR DE PYTHON" # valor definido directamente
      
  
  ##################################################################################################################
  ########################################### CONFIGURACION DEL OTRO CONTENEDOR ####################################
  ##################################################################################################################
  - name: java # nombre que va a tener el contenedor dentro del POD
    image: jorgecardona/test-kubernetes-ip-java-17:v1 # imagen con la que se va a crear el contenedor

    env:         
    - name: SECRET_USERNAME # NOMBRE DE LA VARIABLE DE AMBIENTE
      valueFrom:
        secretKeyRef:
            name: demo-config-secret-base64 # Nombre del objeto tipo Secreto de donde se van a leer las variables
            key: username # valor leido y definido desde el ConfigMap llamado demo-config-map
    - name: SECRET_PASSWORD # NOMBRE DE LA VARIABLE DE AMBIENTE
      valueFrom:
        secretKeyRef:
            name: demo-config-secret-base64 # Nombre del objeto tipo Secreto de donde se van a leer las variables
            key: password # valor leido y definido desde el ConfigMap llamado demo-config-map
    - name: HABILIDAD_SECRETA # NOMBRE DE LA VARIABLE DE AMBIENTE
      valueFrom:
        secretKeyRef:
            name: demo-config-secrets # Nombre del objeto tipo Secreto de donde se van a leer las variables
            key: ENVIRONMENT_SECRETO # valor leido y definido desde el ConfigMap llamado demo-config-map
    - name: COORDENADAS_SECRETAS # NOMBRE DE LA VARIABLE DE AMBIENTE
      valueFrom:
        secretKeyRef:
            name: demo-config-secrets # Nombre del objeto tipo Secreto de donde se van a leer las variables
            key: PUERTO_SECRETO # valor leido y definido desde el ConfigMap llamado demo-config-map
    - name: PUNT0_DE_ENCUENTRO_SECRETO # NOMBRE DE LA VARIABLE DE AMBIENTE
      valueFrom:
        secretKeyRef:
            name: demo-config-secrets # Nombre del objeto tipo Secreto de donde se van a leer las variables
            key: REGION_SECRETA # valor leido y definido desde el ConfigMap llamado demo-config-map
            
    - name: OTRA_JAVA # NOMBRE DE LA VARIABLE DE AMBIENTE
      value: "VALORES ADICIONALES EN EL CONTENEDOR DE JAVA" # valor definido directamente

      
  dnsPolicy: ClusterFirst
  restartPolicy: Never
status: {}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    run: multicontainer-multiservicio-loadbalancer-multisecreto-service
  name: multicontainer-multiservicio-svc-loadbalancer-multisecreto
  namespace: default
spec:
  sessionAffinity: None
  type: LoadBalancer
  selector:
    run: multicontainer-multiservicio
  ports:
  - name: port-java # se puede poner el nombre que se quiera, lo importante es el puerto que TIENE que ser el del contenedor
    protocol: TCP
    targetPort: 9999 # puerto original donde se expone el contenedor de la imagen 
    port: 3333 # puerto en el que se quiere exponer la aplicacion, solo porque esta declarada la propiedad targetPort
    # http://localhost:3333 no conecta usando el otro contenedor del POD, dado que el endpoint del servicio 'web' que esta dentro del POD 
    # porque internamente no se reescribe entonces se debe consumir usando http://localhost:9999 se debe conectar con el puerto original
    # pero si se usa el navegar si queda expuesta por la url http://localhost:3333

  - name: port-python-app1
    protocol: TCP
    port: 5000 # puerto original donde se expone el contenedor de la imagen y puerto donde se va a exponer la aplicacion
 
# kubectl get secret demo-config-secrets -o yaml 
# kubectl get secret demo-config-secrets -o yaml
# kubectl get secret demo-config-secret-base64 -o yaml